v0.9.2
======
_03 Dec 2014_

This update prepares the framework for the tutorials focusing on `Application`,
`Resource`/`ResourceFactory`, `ClientGenerator`, and `LoadBalancer` features.
It also includes some fixes for the development of the first tutorial.

Specific changes made in this release include:

- Making the `Law` constructors easier to understand.  The constructor for each
  subclasses is now much more applicable to that specific subclass.

- Making it more obvious when a `TaskSession` is or is not in use.  There were
  methods throughout multiple classes that were named more or less the same
  thing, and this update works to address some of those issues.  It does this by
  introducing a new `TaskScheduler` object for `Application` instances to use.

- Adjusting the "parameters" of `Request` objects.  The format of these
  parameters (now referred to as the `query`) is much more consistent with URL
  query strings.  This should make it easier when designing custom simulations
  that don't fit into the mold of the original aims of the framework.

- The README file was also cleaned up so that it provides more recent
  information.


v0.9.1
======
_30 Nov 2014_

This update (in addition to the next few) makes an attempt to simplify
components of the framework to make it easier to learn.  In writing the first
tutorial, certain actions were unnecessarily complicated or confusing.  To solve
this problem, certain parts of the framework have been simplified.

There are still a few components that are confusing, and there will likewise be
certain parts of future tutorials that are confusing.  Therefore, the next few
releases will have a focus on simplification and understanding.

Specific changes made in this release include:

 - Automatically assigning Node and Request IDs within the framework.  This
   means that, for simple Applications, it is not necessary to draw unnecessary
   attention to assigning IDs.  In addition, when the values are needed, they
   can be retrieved from a `Node`.  This results in code that is easier to read
   and less error-prone.

 - Using objects for IDs (e.g., `Integer` instead of `int`).  Because IDs are
   commonly used in collections, and because we don't want any of the IDs to be
   used as indices, we store them as objects instead of primitives.

 - Various improvements to the `Request` class:

   - Simplification of the constructor so that unneeded values aren't specified.

   - Improved formatting when printing responses (which include the details of
     the `Request`) for `ClientNode`.

   - Improvements to the `RequestFactory` class to simplify its usage.

   - Adding custom fields to the `Request` object that can be used by
     `Application` subclasses.

There were also a few minor code changes, including:

 - Fixing Javadoc `@link` errors.

 - Fixing the imports to sort them and remove `*` imports.


v0.9.0.1
========
_26 Nov 2014_

When writing the first tutorial that linked against the v0.9 version of the
framework, I found a few bugs or minor things that needed to be changed.  Those
changes are:

 - fixing an infinite loop in clients that send a specific number of requests
   before finishing

 - renaming one of the laws (UniLaw -> ConstantLaw) to make its purpose more
   obvious, as well as to reduce confusion with the UniformLaw

 - allowing RequestFactory instances to be created without needing to store the
   templates in a file.  This simplified the first tutorial.


v0.9
====
_26 Nov 2014_

This is the first marked release.  I put it in place so that it is easier to
quickly find versions of the examples that are associated with particular
versions of the framework.

In this version of the code, most of the commenting is completed, and most of
the unused classes have been removed.  (They can still be easily re-added from
the history of the repository, however -- that's the beauty of source control.)
